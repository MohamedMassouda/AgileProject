generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  password      String
  role          Role          @default(MEMBER)
  emailVerified Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  imageUrl      String?
  member        Member?
  officeMember  OfficeMember?
  sponsor       Sponsor?
  otpToken      OtpToken?
}

model OtpToken {
  userId    String   @id @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime
}

model Member {
  userId String  @id @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  events Event[] @relation("EventAttendees")
}

model Sponsor {
  userId String  @id @unique
  events Event[]
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OfficeMember {
  userId         String  @id @unique
  approvedEvents Event[]
  news           News[]
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id             String        @id @default(cuid())
  title          String
  description    String
  date           DateTime      @default(now())
  location       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  hostId         String
  isApproved     Boolean
  status         EventStatus   @default(PENDING)
  officeMemberId String?
  host           Sponsor       @relation(fields: [hostId], references: [userId])
  approvedBy     OfficeMember? @relation(fields: [officeMemberId], references: [userId])
  categories     Category[]    @relation("CategoryToEvent")
  attendees      Member[]      @relation("EventAttendees")
  attendeeCount  Int           @default(0)
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]  @relation("CategoryToEvent")
}

model News {
  id       String       @id @default(cuid())
  title    String
  content  String
  writerId String
  writer   OfficeMember @relation(fields: [writerId], references: [userId])
  imageUrl String?
  date     DateTime     @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  MEMBER
  OFFICE_MEMBER
  SPONSOR
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
}
